#!/bin/bash
cpp -CC -nostdinc -include  erasedb.h $1 | grep -v '^#' > x
cp x decode.go
sed -i 's/^if  *(\([^)][^)]*\))\(.*{.*}\)/  if \1  \2 /' $1
sed -i 's/^if  *(\([^)][^)]*\))\(.*\)/if \1 { \2 }/' $1
sed -i 's/( { )/() {/' $1

sed -i 's/printf/fmt.Printf/g' $1
# casts first
sed -i 's/(u\([361][624]\))\([A-Za-z][_A-Za-z\.0-9]*\)/uint\1(\2)/g' $1

sed -i 's/u\([361][624]\)[^a-z][^a-z]*\([a-z][a-z]*\)/\2 uint\1/g' $1
sed -i 's/u8  *\(.*\);/var \1 uint8/' $1
sed -i 's/, int[^a-z][^a-z]*\*\([a-z][a-z]*\)/, \1 *int/g' $1
sed -i 's/, int[^a-z][^a-z]*\([a-z][a-z]*\)/, \1 int/g' $1
sed -i 's/const char \*\([a-z][a-z]*\)/\1 string/g' $1

sed -i 's/intno = M.x86.intno;/intno = uint8(M().x86.intno)/' $1

sed -i 's/(\*\(sys_rd.\))/\1/' $1
sed -i 's/(x86emu_optab\[\(op1\)\])/x86emu_optab[\1]/' $1
sed -i 's/\(func.*\)(void)\(.*\)/\1()\2/' $1
sed -i 's/^static void \(.*\)(void)/func \1() {/' $1
sed -i 's/^void \(.*\)(\(.*\))/func \1(\2) {/' $1
sed -i 's/^{$//' $1
sed -i 's/if (_X86EMU_intrTab\[intno\])/if _X86EMU_intrTab[intno] != nil/' $1
sed -i 's/(u16)M.x86.R_FLG/M().x86.spc.FLAGS.Get16()/' $1
sed -i 's/M.x86.R_FLG/M().x86.spc.FLAGS.Get16()/' $1
sed -i 's/M.x86.R_CS = \(.*\);/M().x86.seg.CS.Set16(\1)/' $1
sed -i 's/M.x86.R_IP = \(.*\);/M().x86.spc.IP.Set16(\1)/' $1
sed -i 's/(\*_X86EMU_intrTab.intno.)(intno);/_X86EMU_intrTab[intno](intno)/' $1
sed -i 's/M.x86.R_CS/M().x86.seg.CS.Get()/' $1
sed -i 's/M.x86.R_IP/M().x86.spc.IP.Get16()/' $1
sed -i 's/^.if.*DEBUG.*//' $1
sed -i 's/^.endif.*//' $1
sed -i 's/M.x86.mode/M().x86.mode/' $1
sed -i 's/^#.*//' $1
sed -i 's/for (;;)/for/' $1


echo now do the functions


exit 0
all: cppprim_ops.go cppdecode.go cppdebug.go
	go build cppprim_ops.go
	go build cppdecode.go
	go build cppdebug.go
	echo go build cppops.go

cppops.go:cppops.c
	c2go transpile cppops.c
cppops.c: ops.c defines.h
	cpp --include defines.h ops.c cppops.c
	sed -i 's/= \(genop.*\)\[\(.*\)\](\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppops.c
	sed -i 's/= (\*\(genop.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppops.c
	sed -i 's/(.x86emu_optab2.op2.)(op2)/call4("x86emu_optab2.op2", "op2", "op2", "")/' cppops.c
	sed -i 's/(._X86EMU_intrTab.\(.*\)\])(\(.*\))/call4("_X86EMU_intrTab", "\1", "\2", "")/' cppops.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppops.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppops.c
	sed -i '/^#/d' cppops.c

cppdebug.go:cppdebug.c
	c2go transpile cppdebug.c
cppdebug.c: debug.c defines.h
	cpp --include defines.h debug.c cppdebug.c
	sed -i 's/= \(genop.*\)\[\(.*\)\](\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdebug.c
	sed -i 's/= (\*\(genop.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdebug.c
	sed -i 's/(.x86emu_optab2.op2.)(op2)/call4("x86emu_optab2.op2", "op2", "op2", "")/' cppdebug.c
	sed -i 's/(._X86EMU_intrTab.\(.*\)\])(\(.*\))/call4("_X86EMU_intrTab", "\1", "\2", "")/' cppdebug.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdebug.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdebug.c
	sed -i '/^#/d' cppdebug.c
	sed -i 's/X86EMU_sysEnv tregs/struct &/' cppdebug.c
	sed -i 's/(x86emu_optab\[op1\])(op1)/call1("x86emu_optab.lop1", "op1")/' cppdebug.c

cppdecode.go:cppdecode.c
	c2go transpile cppdecode.c
cppdecode.c: decode.c defines.h
	cpp --include defines.h decode.c cppdecode.c
	sed -i 's/= \(genop.*\)\[\(.*\)\](\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdecode.c
	sed -i 's/= (\*\(genop.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdecode.c
	sed -i 's/(.x86emu_optab2.op2.)(op2)/call4("x86emu_optab2.op2", "op2", "op2", "")/' cppdecode.c
	sed -i 's/(._X86EMU_intrTab.\(.*\)\])(\(.*\))/call4("_X86EMU_intrTab", "\1", "\2", "")/' cppdecode.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdecode.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppdecode.c
	sed -i '/^#/d' cppdecode.c
	sed -i 's/X86EMU_sysEnv tregs/struct &/' cppdecode.c
	sed -i 's/(x86emu_optab\[op1\])(op1)/call1("x86emu_optab.lop1", "op1")/' cppdecode.c
	sed -i 's/(\*x86emu_optab\[op1\])(op1)/call1("x86emu_optab.lop1", "op1")/' cppdecode.c

cppprim_ops.go:cppprim_ops.c
	c2go transpile cppprim_ops.c
	sed -i 's/\(const F_.. \)int/\1uint32/' cppprim_ops.go

cppprim_ops.c: prim_ops.c defines.h
	sed -i 's/_X86EMU_env.x86.spc.FLAGS .=/& (u32)/g' cppprim_ops.c
	cpp --include defines.h prim_ops.c cppprim_ops.c
	sed -i 's/= \(genop.*\)\[\(.*\)\](\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppprim_ops.c
	sed -i 's/= (\*\(genop.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppprim_ops.c
	sed -i 's/(.x86emu_optab2.op2.)(op2)/call4("x86emu_optab2.op2", "op2", "op2", "")/' cppprim_ops.c
	sed -i 's/(._X86EMU_intrTab.\(.*\)\])(\(.*\))/call4("_X86EMU_intrTab", "\1", "\2", "")/' cppprim_ops.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppprim_ops.c
	sed -i 's/= (\*\(opcD.*\)\[\(.*\)\]) *(\(.*\),\(.*\))/= call4("\1", "\2", "\3", "\4")/' cppprim_ops.c
	sed -i '/^#/d' cppprim_ops.c
	sed -i 's/X86EMU_sysEnv tregs/struct &/' cppprim_ops.c
	sed -i 's/(x86emu_optab\[op1\])(op1)/call1("x86emu_optab.lop1", "op1")/' cppprim_ops.c
	sed -i 's/(\*x86emu_optab\[op1\])(op1)/call1("x86emu_optab.lop1", "op1")/' cppprim_ops.c
